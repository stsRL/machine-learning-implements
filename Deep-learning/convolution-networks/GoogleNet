from turtle import forward
import torch
from torch import dropout, nn
import torch.nn.functional as F

class inception(nn.Module):
    def __init__(self,in_channels,ch1,ch3re,ch3,ch5re,ch5,pool_proj):
        super(inception,self).__init__()

        self.branch1=nn.Sequential(
            nn.Conv2d(in_channels=in_channels,out_channels=ch1,kernel_size=1,stride=1),
            nn.ReLU(inplace=True)
        )

        self.branch2=nn.Sequential(
            nn.Conv2d(in_channels=in_channels,out_channels=ch3re,kernel_size=1,stride=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=ch3re,out_channels=ch3,kernel_size=3,stride=1,padding=1),
            nn.ReLU(inplace=True)
        )

        self.branch3=nn.Sequential(
            nn.Conv2d(in_channels=in_channels,out_channels=ch5re,kernel_size=1,stride=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=ch5re,out_channels=ch5,kernel_size=5,stride=1,padding=2),
            nn.ReLU(inplace=True)
        )
        self.branch4=nn.Sequential(
            nn.MaxPool2d(kernel_size=3,stride=1,padding=1),
            nn.Conv2d(in_channels=in_channels,out_channels=pool_proj,kernel_size=1,stride=1),
            nn.ReLU(inplace=True)
        )
    def forward(self,x):
        branch1=self.branch1(x)
        
        branch2=self.branch2(x)
        branch3=self.branch3(x)
        branch4=self.branch4(x)
        output=[branch1,branch2,branch3,branch4]
        return torch.cat(output,1)

class inceptionAux(nn.Module):
    def __init__(self,in_channels,num_classes):
        super(inceptionAux,self).__init__()
        self.avgpool=nn.AvgPool2d(kernel_size=5,stride=3)
        self.conv=nn.Sequential(
            nn.Conv2d(in_channels=in_channels,out_channels=128,kernel_size=1),
            nn.ReLU(inplace=True)
        )
        self.fc1=nn.Linear(2048,1024)
        self.fc2=nn.Linear(1024,num_classes)

    def forward(self,x):
        x=self.avgpool(x)
        x=self.conv(x)
        x=torch.flatten(x,1)
        x=F.dropout(x,p=0.5,training=self.training)

        x=self.fc1(x)
        x=F.relu(x,inplace=True)
        x=F.dropout(x,p=0.5,training=self.training)

        x=self.fc2(x)
        return x

class GoogleNet(nn.Module):
    def __init__(self,num_classes=10,aux_logits=False):
        super(GoogleNet,self).__init__()
        self.aux_logits=aux_logits

        self.part1=nn.Sequential(
            nn.Conv2d(in_channels=3,out_channels=64, kernel_size=7,stride=2,padding=3),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=3,stride=2,padding=1,ceil_mode=True),

            nn.Conv2d(in_channels=64,out_channels=64,kernel_size=1,stride=1),
            nn.ReLU(),
            nn.Conv2d(in_channels=64,out_channels=192,kernel_size=3,stride=1,padding=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=3,stride=2,padding=1,ceil_mode=True)
        )
        self.inception3a=inception(192, 64, 96, 128, 16, 32, 32)
        self.inception3b=inception(256, 128, 128, 192, 32, 96, 64)
        self.inception4a=inception(480, 192, 96, 208, 16, 48, 64)
        self.inception4b=inception(512, 160, 112, 224, 24, 64, 64)
        self.inception4c=inception(512, 128, 128, 256, 24, 64, 64)
        self.inception4d=inception(512, 112, 144, 288, 32, 64, 64)
        self.inception4e=inception(528, 256, 160, 320, 32, 128, 128)
        self.inception5a=inception(832, 256, 160, 320, 32, 128, 128)
        self.inception5b=inception(832, 384, 192, 384, 48, 128, 128)
        self.maxpool=nn.MaxPool2d(kernel_size=3,stride=2,padding=1,ceil_mode=True)

        if aux_logits:
            self.aux1 = inceptionAux(512, num_classes)
            self.aux2 = inceptionAux(528, num_classes)

       
        self.avgbool=nn.AdaptiveAvgPool2d((1,1))
        self.dropout=nn.Dropout(0.4)
        self.fc=nn.Linear(1024,num_classes)
       

    def forward(self,x):
        x=self.part1(x)
        x=self.inception3a(x)
        x=self.inception3b(x)
        x=self.maxpool(x)
        x=self.inception4a(x)
        if self.training and self.aux_logits:
            aux1=self.aux1(x)
        x=self.inception4b(x)
        x=self.inception4c(x)
        x=self.inception4d(x)

        if self.training and self.aux_logits:
            aux2=self.aux2(x)

        x=self.inception4e(x)
        x=self.maxpool(x)
        x=self.inception5a(x)
        x=self.inception5b(x)

        x=self.avgbool(x)
        x=torch.flatten(x,1)
        x=self.dropout(x)
        x=self.fc(x)

        if self.training and self.aux_logits:
            return x,aux1,aux2
        return x


if __name__=="__main__":
    x=torch.rand(size=(128,3,224,224))
    GN=GoogleNet()
    x=GN(x)
    print(x.shape)
